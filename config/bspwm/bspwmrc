#!/usr/bin/sh

# Workspaces and monitors
INTERNAL_MONITOR="eDP-1"
EXTERNAL_MONITOR="HDMI-1"
if [[ $(xrandr -q | grep "${EXTERNAL_MONITOR} connected") ]]; then
  bspc monitor "$EXTERNAL_MONITOR" -d '1' '2' '3' '4'
  bspc monitor "$INTERNAL_MONITOR" -d '5' 
  bspc wm -O "$EXTERNAL_MONITOR" "$INTERNAL_MONITOR"
else
  bspc monitor "$INTERNAL_MONITOR" -d '1' '2' '3' '4' '5'
fi

# mount data drive
if [[ $(findmnt -S /dev/sda1) ]]; then
  echo "Already mounted"
else
  udisksctl mount -b /dev/sda1
fi

# config
#bspc config border_width 2
bspc config border_width 0
bspc config window_gap 15

# padding for polybar/eww bar 
bspc config top_padding 15
bspc config left_padding 15 
bspc config right_padding 15
bspc config bottom_padding 63

bspc config focus_follows_pointer true
bspc config split_ratio 0.5
bspc config borderless_monocle false
bspc config gapless_monocle false

# colours
bspc config normal_border_color "#707880"
bspc config active_border_color "#fffff5"
bspc config focused_border_color "#fffff5"

# window rules
bspc rule -a Windscribe state=floating
bspc rule -a Windscribe2 state=floating
bspc rule -a pavucontrol state=floating
bspc rule -a org.gnome.Nautilus state=floating
bspc rule -a feh state=floating
bspc rule -a lxappearance state=floating
bspc rule -a qt5ct state=floating
bspc rule -a GParted state=floating
bspc rule -a Gufw.py state=floating
bspc rule -a spmp state=floating
bspc rule -a io.github.josephmawa.Bella state=floating
bspc rule -a pcmanfm state=floating
bspc rule -a Thunar state=floating
bspc rule -a Nemo state=floating

# turn redshift on
echo On >"$HOME/.cache/$(whoami)/redshift_state"
redshift -x
redshift -O 4500

# fix default cursor theme being weird

xsetroot -cursor_name left_ptr

# turn off wifi and bluetooth on startup
bluetoothctl power off
nmcli networking off

# start eww daemon

if [[ $(pidof eww) != "" ]]; then
  killall eww
fi
~/eww-source/target/release/eww daemon &
disown

# Open programs

# picom
if [[ $(pidof picom) != "" ]]; then
  killall picom
fi
picom --config ~/.config/picom/picom.conf &
disown

# sxhkd
pgrep -x sxhkd >/dev/null || sxhkd &
disown

# set background
~/.config/bspwm/scripts/wallset_script

# open tablet driver
~/scripts/tools/restart-otd &
disown

# keyboard handler
if [[ $(pidof fcitx5) != "" ]]; then
  killall fcitx5
fi
fcitx5 &
disown

# notification handler
if [[ $(pidof dunst) != "" ]]; then
  killall dunst
fi
dunst &
disown

# polybar
#if [[ $(pidof polybar) != "" ]]; then
# killall polybar
#fi
#for mon in $(polybar --list-monitors | cut -d":" -f1); do
# MONITOR=$mon polybar &
# disown
#done

# fix polybar appearing above fullscreen windows
#xdotool windowstate --add below polybar-main_eDP-1
#xdotool windowstate --add below polybar-main_HDMI-1

# eww bottom bar

eww_window_id=1

if [[ $(pidof eww) != "" ]]; then
  killall eww
fi
for eww_monitor in $(xrandr -q | grep " connected" | cut -d ' ' -f1); do
  ~/eww-source/target/release/eww -c ~/.config/eww/ open --toggle bar --id "$eww_window_id" --screen $eww_monitor &
  disown
  eww_window_id+=1
done

~/eww-source/target/release/eww reload

# fix eww appearing over fullscreen windows
pkill -f ewwBarHide.sh
~/.config/bspwm/scripts/ewwBarHide.sh &
disown

# battery percentage warner
pkill -f batterywarner.sh
~/.config/bspwm/scripts/batterywarner.sh &
disown

# health notifier
if [[ $(pgrep -fl healthwarner.sh) ]]; then
  echo ""
else
  ~/.config/bspwm/scripts/healthwarner.sh &
  disown
fi

# music notifier
pkill -f musicnotify.sh
~/.config/bspwm/scripts/musicnotify.sh &
disown

# authentication agent
if [[ $(pidof lxpolkit) != "" ]]; then
  killall lxpolkit
fi
lxpolkit &
disown

bspc config bottom_padding 63 
bspc config left_padding 15
bspc config top_padding 15

